@inject SvgService svgService
@inherits LayoutComponentBase

<div class="page">
    <MudThemeProvider @ref="@_mudThemeProvider" @bind-IsDarkMode="@_isDarkMode" Theme="_theme" />

    <MudLayout>
        <MudAppBar Elevation="2" Dense >
            <MudIconButton
                Icon="@(_drawerOpen ? Icons.Material.Filled.ArrowBack : Icons.Material.Filled.ArrowForward)"
                Color="Color.Inherit"
                Edge="Edge.Start"
                OnClick="@((e) => DrawerToggle())"
                />
            <MudSpacer />
            <MudText>Conkers</MudText>
            <MudSpacer />
            <MudSwitch @bind-Value="_isDarkMode" Color="Color.Primary" T="bool" ThumbIcon="@(_isDarkMode ? Icons.Material.Filled.DarkMode : Icons.Material.Filled.LightMode)" />
        </MudAppBar>
        <MudDrawer @bind-Open="_drawerOpen" Variant="@DrawerVariant.Temporary" Elevation="24" Overlay="false" ClipMode="DrawerClipMode.Always">
            <Menu />
        </MudDrawer>
        <MudMainContent>
            <Home />
        </MudMainContent>
    </MudLayout>
</div>

@code {
    bool _drawerOpen = true;
    private MudThemeProvider _mudThemeProvider;

    private string? _iconSvg;

    private MudTheme _theme = new MudTheme()
    {
        PaletteLight = new PaletteLight()
        {
            // Primary = "#B79A52",
            // Secondary = "#F1C40F",
        },
        PaletteDark = new PaletteDark()
        {
            // Primary = "#8C733A",
            // Secondary = "#FCD13D",
        },
        Typography = new Typography()
        {
            Default = new Default()
            {
                FontFamily = new[] { "LeagueSpartan", "sans-serif" },
            }

        }
    };
    private bool _isDarkMode;

    void DrawerToggle()
    {
        _drawerOpen = !_drawerOpen;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            _isDarkMode = await _mudThemeProvider.GetSystemPreference();
            StateHasChanged();
        }
    }
}